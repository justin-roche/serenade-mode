(require 'helm)
(require 'ht)
(require 'cl)
(require 's)
(require 'serenade-helm)

(defvar serenade-speech-maps (ht("global" (ht)) ) 
  "hashtable of Serenade voice maps")

(setq serenade--add-builtin-global-defaults t )
(setq serenade--add-custom-global-defaults t )

;; The list of default mappings corresponding to built in Serenade commands. These are exluded from autogenerated js because Serenade already contains the speech patterns. Serenade itself will handle "copy <target>" and "cut <target>", sending a diff message and populating the system clipboard, so these are not included. Serenades built-in "paste" command is also sufficient for sending a diff with the correct result.

(setq serenade--builtin-global-defaults '(;;
                                          ( "copy" .   serenade--copy-selection ) 
                                          ( "cut" .   serenade--cut-selection ) 
                                          ( "select <target>" .   serenade--select-target ) 
                                          ( "undo" .   serenade--undo ) 
                                          ( "redo" .   serenade--redo ) 
                                          ( "open <file>" . serenade--open-file  ) 
                                          ( "<nth> tab" . serenade--switch-tab  ) 
                                          ( "close tab" . delete-window  ) 
                                          ( "save"  . save-buffer  ) 
                                          ( "create tab" . split-window-right-and-focus  ) 
                                          ( "next tab" . next-buffer  ) 
                                          ( "previous tab" . previous-buffer) 
                                          ( "scroll" . scroll-up-command  ) 
                                          ( "scroll down" . scroll-up-command  ) 
                                          ( "scroll up" . scroll-down-command  ) 
                                          ( "open file list" . nil) 
                                          ( "style" . nil) 
                                          ( "go to definition" . nil) 
                                          ( "add breakpoint" . nil) 
                                          ( "remove breakpoint" . nil) 
                                          ( "toggle breakpoint" . nil) 
                                          ( "start debug" . nil  ) 
                                          ( "start debugging" . nil  ) 
                                          ( "stop debug" . nil  ) 
                                          ( "stop debugging" . nil  ) 
                                          ( "pause debug" . nil  ) 
                                          ( "show hover" . nil) 
                                          ( "continue debug" . nil  ) 
                                          ( "step into" . nil  ) 
                                          ( "step out" . nil  ) 
                                          ( "step over" . nil) 
                                          ( "continue" . nil)))

;; The list of default mappings not corresponding to built in Serenade commands. These are included in autogenerated js because Serenade does not contain the speech patterns.
(setq serenade--custom-global-defaults '(;;
                                         ( "show commands" . serenade-commands  ) 
                                         ( "serenade log" . serenade-commands-log-open-log  ) 
                                         ( "snippet <name> of <arg>" .
                                           serenade--insert-yasnippet-with-args  )
                                         ( "snippet <name>" . serenade--insert-yasnippet  )))

(defun serenade--initialize-mode-maps ()
  ;; This function clears the SERENADE-SPEECH-MAPS and sets them according to the default binding.
  (serenade--clear-mode-maps) 
  (if serenade--add-builtin-global-defaults (serenade--add-builtin-global-defaults)) 
  (if serenade--add-custom-global-defaults (serenade--add-custom-global-defaults)) 
  (run-hooks 'serenade-speech-maps-hook))

(defun serenade--clear-mode-maps () 
  (setq serenade-speech-maps (ht("global" (ht)) ) ) 
  (serenade--clear-helm-M-x-map))

(defun serenade--get-global-map () 
  (ht-get serenade-speech-maps "global"))

(defun serenade--add-builtin-global-defaults () 
  (serenade-global-set-speech serenade--builtin-global-defaults))

(defun serenade--add-custom-global-defaults () 
  (serenade-global-set-speech serenade--custom-global-defaults))

(cl-defun 
    serenade-global-set-speech
    (speech &optional command )
  ;; Convenience function for adding speech bindings to the global serenade speech map. Possible inputs are an association list of speech-command bindings, a single command from which the asociated speech is automatically generated, or a pair of SPEECH and COMMAND.
  (if (and (listp speech)) 
      (dolist (item speech ) 
        (serenade-global-set-speech (car item) 
                                    (cdr item)))) 
  (serenade-define-speech 'global speech command))

(defun serenade-auto-define-speech (mode command-or-list) 
  (if (listp command-or-list) 
      (dolist (command command-or-list ) 
        (serenade-auto-define-speech mode command)) 
    (let* ((split-command  (s-replace  "-" " " (symbol-name command-or-list)))) 
      (serenade-define-speech mode split-command command-or-list))))

(cl-defun 
    serenade-define-speech
    (mode speech &optional command)
  ;; this function associates speech pattern SPEECH with an 8lisp function COMMAND for the symbol MODE. If the speech-map provided by MODE does not exist a speech-map is created. If mode is the special symbol 'global then the binding is created for the global speech map. If a previous binding exists for the speech pattern it is overwritten.
  (if (listp speech) 
      (dolist (item speech ) 
        (serenade-define-speech mode (car item) 
                                (cdr item))) 
    (let* ((name (symbol-name mode)) 
           (voice-map (ht-get serenade-speech-maps name ))) 
      (if (string-equal name "global") 
          (ht-set (ht-get serenade-speech-maps "global") speech (ht("command" command))  ) 
        (if voice-map (ht-set voice-map speech (ht ("command" command))) 
          (progn (ht-set serenade-speech-maps name (ht)) 
                 (ht-set (ht-get serenade-speech-maps name ) speech (ht ("command" command)))))) 
      (if serenade-helm-M-x (serenade--update-helm-M-x-map speech command)))))

(defun serenade--find-voice-binding (speech) 
  (or (serenade--find-in-active-minor-maps speech) 
      (serenade--find-in-active-major-map speech) 
      (serenade--find-in-global-map speech)))

(defun serenade--find-in-active-minor-maps (speech)
  ;; search speech map applicable to the current minor-mode-map-alist. If any contain the speech patterns SPEECH return the command for the speech.
  (catch 'result 
    (mapc (lambda (mode-and-map) 
            (if (and (boundp (car mode-and-map)) 
                     (symbol-value (car mode-and-map))) 
                (if-let* ((mode (symbol-name (car mode-and-map))) 
                          (voice-map (ht-get* serenade-speech-maps mode)) 
                          (command (ht-get* voice-map speech))) 
                    (throw 'result command)))) minor-mode-map-alist)
    nil))

(defun serenade--find-in-active-major-map (speech) 
  (if-let* ((current-mode-map (ht-get serenade-speech-maps (symbol-name major-mode)))) 
      (ht-get* current-mode-map speech)))

(defun serenade--find-in-global-map (speech) 
  (ht-get* serenade-speech-maps "global" speech))

(defun serenade-helm-commands ()
  ;; This function provide all current speech bindings in a helm buffer.
  (interactive) 
  (helm :sources (helm-build-sync-source "serenade" 
                   :candidates (serenade--get-helm-candidates serenade-speech-maps)) 
        :buffer "*helm serenade*"))

(defmacro serc (fn &rest arg) 
  (let* ((curried-name (intern (concat "serenade-curried->" (symbol-name fn) "->"(mapconcat
                                                                                  'identity arg
                                                                                  "--")))))
    (defalias  curried-name 
      `(lambda 
         (&rest 
          speech-args) 
         ,(format "Run %s with arguments: %s" fn (mapconcat 'identity arg ", ")) 
         (interactive) 
         (apply ',fn (append ',arg speech-args)))) 
    `(intern-soft ',curried-name )))

(provide 'serenade-commands)

;; (serenade-auto-define-speech 'global '(uncomment-region clear-buffer))
;; (defun curry-test (a b c)

;;   (message (concat " 1"  a  "2"  b "3" c)))

;; (defun curry-test (a b )
;;   (message (concat " 1"  a  "2"  b  )))

;; (setq ser-xxx `(("a" . ,(serenade-curry curry-test "testing" "e"))))
;; ;; (message(type-of(cdr (car ser-xxx))))

;; (dolist (item ser-xxx )
;;   (funcall (cdr item) ))
